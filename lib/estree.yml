
Identifier:
  type: Identifier
  name: ~string

FunctionExpression:
  type: FunctionExpression
  async: ~boolean
  generator: ~boolean
  id: [Maybe, ~Identifier]
  params: [Array, ~Pattern]
  body: ~BlockStatement

Property:
  - Either
  # init
  - type: Property
    kind: init
    method: false
    computed: false
    key: ~Key
    value: ~Expression
  - type: Property
    kind: init
    method: false
    computed: true
    key: ~Expression
    value: ~Expression
  # method
  - type: Property
    kind: init
    method: true
    computed: false
    key: ~Key
    value: ~FunctionExpression
  - type: Property
    kind: init
    method: true
    computed: true
    key: ~Expression
    value: ~FunctionExpression
  # get / set
  - type: Property
    kind: [Either, get, set]
    method: false
    computed: false
    key: ~Key
    value: ~FunctionExpression
  - type: Property
    kind: [Either, get, set]
    method: false
    computed: true
    key: ~Expression
    value: ~FunctionExpression

TemplateElement:
  type: TemplateElement
  raw: ~string
  cooked: ~string

SpreadElement:
  type: SpreadElement
  argument: ~Expression

TemplateExpression:
  type: TemplateExpression
  expressions: [Array, ~Expression]
  quasis: [Array, TemplateElement]

BlockStatement:
  type: BlockStatement
  body: [Array, ~Statement]

Expression:
  - Either
  # Literal
  - type: Literal
    bigint: ~string
    value: null
  - type: Literal
    regex:
      pattern: ~string
      flags: ~string
    value: null
  - type: Literal
    value: [Either, null, ~boolean, ~number, ~string]
  - ~TemplateExpression
  - type: TaggedTemplateExpression
    tag: ~Expression
    quasi: ~TemplateExpression
  - ~FunctionExpression
  - type: ArrowFunctionExpression
    expression: true
    async: ~boolean
    params:
      - ^Either
      - [^Repeat, ~Pattern]
      - [^Repeat, ~Pattern, ~RestElement]
    body: ~Expression
  - type: ArrowFunctionExpression
    expression: false
    async: ~boolean
    params:
      - ^Either
      - [[^Repeat, ~Pattern]]
      - [[^Repeat, ~Pattern], ~RestElement]
    body: ~BlockStatement
  - type: ClassExpression
    superClass: [Maybe, ~Expression]
    body: ~ClassBody
  - type: ArrayExpression
    elements: [Array, [Maybe, [Either, ~SpreadElement, ~Expression]]]
  - type: ObjectExpression
    elements: [~Repeat, [Either ~SpreadElement, ~Property]]
  # Environment
  - type: Super
  - type: ThisExpression
  - type: MetaProperty
    meta: ~Identifier
    property: ~Identifier
  - type: AssignmentExpression
    operator: "="
    left: ~Pattern
    right: ~Expression
  - type: AssignmentExpression
    operator: AssignmentOperator
    left: [Either, ~CallExpression, ~Identifier, ~MemberExpression]
    right: ~Expression
  - type: UpdateExpression
    operator: UpdateOperator
    argument: [Either, ~CallExpression, ~Identifier, ~MemberExpression]
  # Combination
  - type: Unary
